openapi: 3.0.0
info:
  title: 4All Locadora
  description: Essa é a documentação do projeto Desafio Locadora para a 4all
  version: 1.0
  contact:
    name: Gabriel Soares Pereira
    email: gsoaresp92@gmail.com
    url: https://github.com/gabrielsp92
host: localhost:4000
schemes:
  - http
  - https
consumes:
  - application/json
produces:
  - application/json

## COMPONENTS
components:
  ## AUTH
  securitySchemes:
    admin:
      type: apiKey
      name: Authorization
      in: header
    client:
      type: apiKey
      name: Authorization
      in: header
  responses:
    UnauthorizedError:
      description: Usuário nao autorizado
  ## SCHEMAS
  schemas:
    Register:
      properties:
        email:
          type: string
        password:
          type: string
        name:
          type: string
      reuired:
        - email
        - password
        - name
    Login:
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    Token:
      properties:
        token:
          type: string
    User:
      properties:
        email:
          type: string
        password:
          type: string
        name:
          type: string
        id:
          type: integer
    PatchUser:
      properties:
        email:
          type: string
        password:
          type: string
        name:
          type: string
    Movie:
      properties:
        director:
          type: string
        title:
          type: string
        quantity:
          type: integer
        id:
          type: integer
    ListUsers:
      properties:
        page:
          type: integer
        per_page:
          type: integer
        totalItems:
          type: integer
        items:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/User' 

tags:
  - name: Sistema
    description: informações e disponibilidade do sistema
  - name: Autenticação
    description: Rotas utilizadas para autenticação na plataforma
  - name: Usuários
    description: Gestão de Usuários
  - name: Filmes
    description: Gestão de Filmes
  - name: Locações
    description: Gestão de Locações
  - name: Administrador
    description: Rotas exclusivas para usuários do tipo administrador

## PATHS
paths:
  /healthcheck:
    get:
      tags:
        - Sistema
      summary: Verifica a saúde do serviço
      description: Este endpoint pode ser utilizado para verificar se o servidor está disponível e acessível.
      responses:
        '200':
          description: Successful operation
          schema:
            type: string
  /auth/login:
    post:
      tags:
        - Autenticação
      summary: Gera um token de autenticação para a plataforma encontrada
      description: >
        O resultado desse endpoint deve ser inserido no header de autenticação. Exemplo:
          `Authorization: Bearer SEU_TOKEN_AQUI`
        Esse header será obrigatório em todos os endpoints que exigem autenticação.
        O token gerado é um JWT, e contém as informações básicas do usuário, que podem ser acessadas ao decodificar a string, ou através do endopoint `/auth/me`.
        O token possui validade de *3600* segundos, é importante que seja gerado um novo token atualizado através do endpoint `/auth/refresh-token` caso seja necessário manter o acesso
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        401:
          description: Senha inválida ou incorreta
        404:
          description: Usuário não encontrado na plataform
  /auth/register:
    post:
      tags:
        - Autenticação
      summary: Realiza o cadastro de no um novo usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Senha inválida ou incorreta
        404:
          description: Usuário não encontrado na plataform
  /auth/refresh:
    get:
      tags:
        - Autenticação
      summary: Gera um novo token de autenticação atualizado com uma nova data de expiração
      description: "Atenção: essa ação só pode ser utilizada uma vez por token. Caso o token resultante seja perdido será necessário uma nova autenticação."
      security:
        - client:
        - admin:
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        401:
          description: Token inválido
  /auth/logout:
    post:
      tags:
        - Autenticação
      summary: realiza o logout do usuario
      security:
        - client:
        - admin:
      responses:
        200:
          description: OK
        401:
          description: Token inválido
  /auth/me:
    get:
      tags:
        - Autenticação
      summary: Busca os dados do usuário logado
      security:
        - client:
        - admin:
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user:
    patch:
      tags:
        - Usuários
      summary: Atualiza os dados do usuário logado
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchUser'
      security:
        - client:
        - admin:
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /admin/user:
    get:
      tags:
        - Usuários
        - Administrador
      summary: Lista os usuários cadastrados pelos parametros informados na query, page, per_page e search
      parameters:
        - in: query
          name: per_page
          description: O número de registros por página a ser buscado
          schema:
            type: integer
        - in: query
          name: page
          description: O número da página a ser buscado
          schema:
            type: integer
        - in: query
          name: sortBy
          description: O nome atributo no qual deseja ordenar a busca
          schema:
            type: string
        - in: query
          name: descending
          description: Define se a ordenação é decrescente
          schema:
            type: boolean
        - in: query
          name: search
          description: O texto de busca correspondendo ao nome ou email desejado
          schema:
            type: string
      security:
        - admin:
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsers'
    post:
      tags:
        - Usuários
        - Administrador
      summary: Cria um novo usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
      security:
        - admin:
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /admin/user/{userId}:
    get:
      tags:
        - Usuários
        - Administrador
      summary: Busca um usuário pelo id informado
      parameters:
        - in: path
          name: userId
          type: integer
          description: Id do usuário a ser pesquisado
      security:
        - admin:
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags:
        - Usuários
        - Administrador
      summary: Deleta um usuário pelo id informado
      parameters:
        - in: path
          name: userId
          type: integer
          description: Id do usuário a ser excluído
      security:
        - admin:
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    patch:
      tags:
        - Usuários
        - Administrador
      summary: Atualiza os dados do usuário encontrado pelo Id informado
      parameters:
        - in: path
          name: userId
          type: integer
          description: Id do usuário a ser alterado
      security:
        - admin:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchUser'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /admin/user/{userId}/promote:
    put:
      tags:
        - Usuários
        - Administrador
      summary: Promove um clientee a administrador pelo id informado
      parameters:
        - in: path
          name: userId
          type: integer
          description: Id do usuário a ser promovido
      security:
        - admin:
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /admin/user/{userId}/demote:
    put:
      tags:
        - Usuários
        - Administrador
      summary: Rebaixa um administrador a cliente pelo id informado
      parameters:
        - in: path
          name: userId
          type: integer
          description: Id do usuário a ser rebaixado
      security:
        - admin:
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'